"Games"
{
	"tf"
	{
		"Addresses"
		{
			"CTFProjectile_Flare::Explode_Air()::SelfDamageRadius"
			{
				// validate that this location has the immediate 100.f (0x42C80000)
				"signature"		"CTFProjectile_Flare::Explode_Air()"
				"linux"
				{
					"offset"	"1128" // 0x459
				}
				"windows"
				{
					"offset"	"559" // 0x231
				}
			}
		}
		"Signatures"
		{
			"LookupActivity" //random guessing.
			{
				//this function looks nothing like the one in linux, its littearlly guessing good luck.
				"library"	"server"
				"windows"	"\x55\x8B\xEC\x57\x8B\x7D\x08\x85\xFF\x75\x2A\x33\xC0\x5F\x5D\xC3\x53"
				"linux"		"@_Z14LookupActivityP10CStudioHdrPKc"
			}
			"CTFProjectile_Flare::Explode_Air()"
			{
				// contains unique xref "ExplosionCore_MidAir_Flare"
				"library"	"server"
				"linux"		"@_ZN19CTFProjectile_Flare11Explode_AirEP10CGameTraceib"
				"windows"	"\x55\x8B\xEC\x81\xEC\xCC\x00\x00\x00\x53\x56"
			}
			"JarExplode()"
			{
				// find xref "extinguish_reduces_cooldown"
				"library"	"server"
				"linux"		"@_Z10JarExplodeiP9CTFPlayerP11CBaseEntityS2_RK6Vectorif7ETFCondfPKcS8_"
				"windows"	"\x2A\x2A\x2A\x2A\x2A\x2A\x83\xE4\xF0\x83\xC4\x04\x55\x8B\x6B\x04\x89\x6C\x24\x04\x8B\xEC\x81\xEC\xE8\x02\x00\x00"
			}
			"NextBotGroundLocomotion::UpdateGroundConstraint"
			{
				//inlined in windows 64, but it doesnt matter we dont directly need it.
				"library"		"server"
				"linux64"		"@_ZN23NextBotGroundLocomotion22UpdateGroundConstraintEv"
				"windows64"		"\x53\x8B\xDC\x83\xEC\x08\x83\xE4\xF0\x83\xC4\x04\x55\x8B\x6B\x04\x89\x6C\x24\x04\x8B\xEC\x81\xEC\x28\x01\x00\x00\x56\x57\x8B\xF9\x33\xD2"
				
				"linux"			"@_ZN23NextBotGroundLocomotion22UpdateGroundConstraintEv"
				"windows"		"\x53\x8B\xDC\x83\xEC\x08\x83\xE4\xF0\x83\xC4\x04\x55\x8B\x6B\x04\x89\x6C\x24\x04\x8B\xEC\x81\xEC\x28\x01\x00\x00\x56\x57\x8B\xF9\x33\xD2"
			}
			"CWeaponMedigun::AllowedToHealTarget()"
			{
				// contains non-unique string "weapon_blocks_healing" with references to CTFPlayerShared offset in the next few blocks
				"library"	"server"
				"linux64"		"@_ZN14CWeaponMedigun19AllowedToHealTargetEP11CBaseEntity"
				"windows64"	"\x48\x89\x5C\x24\x10\x48\x89\x6C\x24\x18\x48\x89\x74\x24\x20\x57\x48\x83\xEC\x30\x48\x8B\xDA"
				
				"linux"		"@_ZN14CWeaponMedigun19AllowedToHealTargetEP11CBaseEntity"
				"windows"	"\x55\x8B\xEC\x53\x8B\xD9\x56\x57\x8B\x93\x10\x02\x00\x00\x85\xD2\x0F\x84\x2A\x2A\x2A\x2A\xB9\xFF\x1F\x00\x00\x83\xFA\xFF\x74\x2A\x0F\xB7\xCA\xA1\x2A\x2A\x2A\x2A\xC1\xE1\x04\x8D\x78\x04\x03\xF9\x0F\x84\x2A\x2A\x2A\x2A\xC1\xEA\x10\x39\x57\x04\x0F\x85\x2A\x2A\x2A\x2A\x8B\x3F\x85\xFF\x0F\x84\x2A\x2A\x2A\x2A\x8B\x07\x8B\xCF\x8B\x80\x48\x01\x00\x00\xFF\xD0\x84\xC0\x0F\x84\x2A\x2A\x2A\x2A\x8B\x75\x08\x85\xF6\x74\x2A"
			}
			"CTFWeaponBaseMelee::GetShootSound"
			{
				// "Weapon_Slap.OpenHand", last function in the end
				"library"		"server"
				"linux64"			"@_ZNK18CTFWeaponBaseMelee13GetShootSoundEi"
				"windows64"		"\x48\x89\x6C\x24\x10\x48\x89\x74\x24\x18\x57\x48\x83\xEC\x20\x8B\xEA\x48\x8B\xF9"

				"linu4"			"@_ZNK18CTFWeaponBaseMelee13GetShootSoundEi"
				"windows"			"\x55\x8B\xEC\x53\x8B\x5D\x08\x57\x8B\xF9\x83\xFB\x09"

			}
			"CBaseEntity::SetLocalOrigin" // String aBadSetlocalori,   Bad SetLocalOrigin(%f,%f,%f) on %s\n
			{
				"library"	"server"
				"linux64"		"@_ZN11CBaseEntity14SetLocalOriginERK6Vector"
				"windows64"	"\x48\x89\x5C\x24\x10\x48\x89\x74\x24\x18\x57\x48\x83\xEC\x50\xF3\x0F\x10\x0D\xE1\x45\xA4\x00"
				
				"linux"		"@_ZN11CBaseEntity14SetLocalOriginERK6Vector"
				"windows"	"\x55\x8B\xEC\x83\xEC\x14\xF3\x0F\x10\x0D\x2A\x2A\x2A\x2A\x56\x8B\x75\x08\x0F\x28\xC1\x0F\x57\x05\x2A\x2A\x2A\x2A\x57\x8B\xF9\xF3\x0F\x10\x16\x0F\x2F\xD0\x89\x7D\xFC\x0F\x86\x2A\x2A\x2A\x2A\x0F\x2F\xCA\x0F\x86\x2A\x2A\x2A\x2A\xF3\x0F\x10\x56\x04\x0F\x2F\xD0\x0F\x86\x2A\x2A\x2A\x2A\x0F\x2F\xCA\x0F\x86\x2A\x2A\x2A\x2A\xF3\x0F\x10\x56\x08\x0F\x2F\xD0\x0F\x86\x2A\x2A\x2A\x2A\x0F\x2F\xCA\x0F\x86\x2A\x2A\x2A\x2A\x8B\x06\x81\xC7\x40\x03\x00\x00"
			}
		}
		"Functions"
		{
			"CBaseGrenade::Detonate"
			{
				"offset"	"CBaseGrenade::Detonate"
				"hooktype"	"entity"
				"return"	"void"
				"this"		"entity"
			}
			"CBaseGrenade::Explode"
			{
				"offset"	"CBaseGrenade::Explode"
				"hooktype"	"entity"
				"return"	"void"
				"this"		"entity"
				"arguments"
				{
					"pTrace"
					{
						"type"	"objectptr"
					}
					"bitsDamageType"
					{
						"type"	"int"
					}
				}
			}
			"CTFProjectile_SpellFireball::Explode"
			{
				"offset"	"CTFProjectile_SpellFireball::Explode"
				"hooktype"	"entity"
				"return"	"void"
				"this"		"entity"
				"arguments"
				{
					"pTrace"
					{
						"type"	"objectptr"
					}
				}
			}
			"CTFProjectile_Flare::Explode_Air()"
			{
				"signature"		"CTFProjectile_Flare::Explode_Air()"
				"callconv"		"thiscall"
				"return"		"void"
				"this"			"entity"
				"arguments"
				{
					"trace"
					{
						"type"	"int"
					}
					"damagetype"
					{
						"type"	"int"
					}
					"self"
					{
						"type"	"bool"
					}
				}
			}
			"JarExplode()"
			{
				"signature"		"JarExplode()"
				"callconv"		"cdecl"
				"return"		"void"
				"arguments"
				{
					"filter"
					{
						"type"	"int" // IRecipientFilter*
					}
					"thrower"
					{
						"type"	"cbaseentity"
					}
					"original_launcher"
					{
						"type"	"cbaseentity"
					}
					"launcher"
					{
						"type"	"cbaseentity"
					}
					"position"
					{
						"type"	"vectorptr"
					}
					"team_num"
					{
						"type"	"int"
					}
					"radius"
					{
						"type"	"float"
					}
					"condition"
					{
						"type"	"int"
					}
					"duration"
					{
						"type"	"float"
					}
					"particle_effect"
					{
						"type"	"charptr"
					}
					"sound_effect"
					{
						"type"	"charptr"
					}
				}
			}
			"CTFGrenadePipebombProjectile::PipebombTouch" 
			{
				// virtual void PipebombTouch( CBaseEntity *pOther )
				"offset" 		"CTFGrenadePipebombProjectile::PipebombTouch"
				"hooktype" 		"entity"
				"return" 		"void"
				"this" 			"entity"
				"arguments"
				{
					"other"
					{
						"type" "cbaseentity"
					}
				}
			}
			"CTFBaseRocket::Explode"
			{
				"offset"	"CTFBaseRocket::Explode"
				"hooktype"	"entity"
				"return"	"void"
				"this"		"entity"
				"arguments"
				{
					"pTrace"
					{
						"type"	"objectptr"
					}
					"pEntity"
					{
						"type"	"cbaseentity"
					}
				}
			}
			"NextBotGroundLocomotion::UpdateGroundConstraint"
			{
				"signature"	"NextBotGroundLocomotion::UpdateGroundConstraint"
				"callconv"	"thiscall"
				"return"	"void"
				"this"		"address"
				"arguments"
				{
				
				}
			}
			"CWeaponMedigun::AllowedToHealTarget()"
			{
				"signature"		"CWeaponMedigun::AllowedToHealTarget()"
				"callconv"		"thiscall"
				"return"		"bool"
				"this"			"entity"
				"arguments"
				{
					"heal_target"
					{
						"type"	"cbaseentity"
					}
				}
			}	
		}
		"Offsets"
		{
			"CBaseEntity::WorldSpaceCenter"		
			{
				"linux"		"156"
				"windows"	"155"
			}
			"CTFBaseRocket::Explode"
			{
				"linux"		"240"
				"windows"	"239"
			}
			"CBaseAnimating::BecomeRagdollOnClient"
			{
				"windows"	"205"
				"linux"		"206"
			}
			"CBaseGrenade::Explode"
			{
				"linux"		"236"
				"windows"	"235"
			}
			"CBaseGrenade::Detonate"
			{
				"linux"		"237"
				"windows"	"236"
			}
			"CTFProjectile_SpellFireball::Explode"
			{
				"linux"		"250"
				"windows"	"247"
			}
			"CTFGrenadePipebombProjectile::PipebombTouch" 
			{
				"windows" 	"260"
				"linux" 	"261"
			}
			"CTFWeaponBaseMelee::GetShootSound"
			{
				"windows"	"337"
				"linux"		"343"
			}
		}
	}
}